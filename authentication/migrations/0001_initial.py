# Generated by Django 3.2.3 on 2021-06-14 15:49

import authentication.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=200)),
                ('email', models.EmailField(max_length=60, validators=[authentication.models.ESISBAEmailValidator(allowlist=['esi-sba.dz'])])),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('GRH', 'GRH'), ('Doctor', 'Doctor'), ('Nurse', 'Nurse'), ('Patient', 'Patient')], default='Patient', max_length=50)),
                ('image', models.ImageField(blank=True, upload_to='userImages')),
                ('phone', models.CharField(blank=True, max_length=200)),
                ('date_of_birth', models.DateField(default=datetime.date.today)),
                ('city', models.CharField(blank=True, max_length=2)),
                ('address', models.CharField(blank=True, max_length=200)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ATP', 'ATP'), ('Student', 'Student'), ('Teacher', 'Teacher')], default='Student', max_length=50)),
                ('education_level', models.CharField(choices=[('NONE', 'NONE'), ('MA-A', 'MA-A'), ('MA-B', 'MA-B'), ('MC-A', 'MC-A'), ('MC-B', 'MC-B'), ('Professor', 'Professor'), ('1CPI', '1CPI'), ('2CPI', '2CPI'), ('1CS', '1CS'), ('2CS-ISI', '2CS-ISI'), ('2CS-SIW', '2CS-SIW'), ('3CS-ISI', '3CS-ISI'), ('3CS-SIW', '3CS-SIW')], default='NONE', max_length=50)),
                ('is_approaved', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Doctor', 'Doctor'), ('Nurse', 'Nurse')], default='Doctor', max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
